(()=>{"use strict";const t={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let e;const i=new Uint8Array(16);function s(){if(!e&&(e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!e))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(i)}const a=[];for(let t=0;t<256;++t)a.push((t+256).toString(16).slice(1));const o=function(e,i,o){if(t.randomUUID&&!i&&!e)return t.randomUUID();const n=(e=e||{}).random||(e.rng||s)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,i){o=o||0;for(let t=0;t<16;++t)i[o+t]=n[t];return i}return function(t,e=0){return(a[t[e+0]]+a[t[e+1]]+a[t[e+2]]+a[t[e+3]]+"-"+a[t[e+4]]+a[t[e+5]]+"-"+a[t[e+6]]+a[t[e+7]]+"-"+a[t[e+8]]+a[t[e+9]]+"-"+a[t[e+10]]+a[t[e+11]]+a[t[e+12]]+a[t[e+13]]+a[t[e+14]]+a[t[e+15]]).toLowerCase()}(n)};class n{constructor(t,e){this.parentElement=document.querySelector(t),this.method=e}init(){let t;switch(this.modal=document.createElement("div"),this.modal.classList.add("modal"),document.querySelector(".header__button").addEventListener("click",(()=>{this.modal.classList.add("visible")})),"delete"===this.method&&this.modal.classList.add("delete-task"),this.method){case"add":t="Добавить";break;case"edit":t="Изменить";break;case"delete":t="Удалить"}return this.modal.innerHTML=`\n      <form class="modal-form visible" name="taskmanager-form">\n        <div class="modal-form__header">\n          <p>${t} тикет</p>\n        </div>\n        <label class="modal__description_short">Краткое описание\n          <input class="edit-input" name="short-description" type="text" />\n        </label>\n        <label class="modal__description_full">Подробное описание\n          <input class="edit-input full" name="long-description"></input>\n        </label>\n        <p class="modal__awarening">Вы уверены, что хотите удалить тикет? Это действие необратимо</p>\n        <div class="modal-form__button-container">\n          <button class="button cancel-button">Отмена</button>\n          <button class="button submit-button">OK</button>\n        </div>\n      </form>\n        `,this.parentElement.appendChild(this.modal),this.addEvents(),this.modal}addEvents(){this.modal.addEventListener("click",(t=>{t.preventDefault(),(t.target.classList.contains("modal")||t.target.closest(".cancel-button"))&&this.modal.remove()})),this.modal.addEventListener("submit",(t=>{t.preventDefault()}))}remove(){this.modal.remove()}}const d=async function(t,e){let i,s,a;switch(t){case"get":s="GET",a="allTickets";break;case"getId":s="GET",a=`ticketById&id=${e.id}`;break;case"edit":s="POST",a=`editTicket&id=${e.id}`;break;case"delete":s="POST",a=`deleteTicket&id=${e.id}`;break;case"add":s="POST",a="createTicket";break;case"check":s="POST",a=`checkTicket&id=${e.id}`}i="POST"===s&&"delete"!==t?JSON.stringify(e):null;const o={"Content-Type":"application/json"};try{const t=await fetch(`http://localhost:7070?method=${a}`,{method:s,body:i,headers:o});return await t.json()}catch(t){return t}};class l{constructor(t,e){this.parentElement=document.querySelector(t),this.addButtonElement=document.querySelector(e),this.tickets=[]}async init(){try{this.tickets=await d("get",null)}catch(t){console.error(t)}0!==this.tickets.length&&this.renderTaskList(),this.addEvents()}renderTaskList(){this.taskList||(this.taskList=document.createElement("ul"),this.taskList.classList.add("tickets-list"),this.parentElement.appendChild(this.taskList)),this.taskList.innerHTML="",this.modal=null,this.tickets.forEach((t=>this.taskList.appendChild(this.createTaskItem(t))))}createTaskItem(t){let{id:e,status:i,title:s,created:a}=t;const o=document.createElement("li");return o.classList.add("tickets-list__item"),o.dataset.id=`${e}`,o.innerHTML=`\n      <div class="item-visible">\n        <div class="item-visible left">\n\t\t\t\t\t<label class="ticket-button ticket-status">\n\t\t\t\t\t\t<input type="checkbox" />\n\t\t\t\t\t</label>\n          <p class="ticket-content">${s}</p>\n        </div>\n        <div class="item-visible right">\n          <p class="ticket-date">${a}</p>\n            <div class="ticket-actions">\n              <button class="ticket-button edit-button"></button>\n              <button class="ticket-button delete-button"></button>\n            </div>\n          </div>\n        </div>\n        <div class="item__description">\n          <p class="item__description-content">Описание</p>\n        </div>\n      `,o.querySelector(".ticket-status input").addEventListener("click",(t=>{t.target.checked=i})),this.addEventForTaskItem(o),o}collectFullData(t){let{textData:e,id:i,status:s=!1}=t,a=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const n={};n.id=i||o(),e&&(n.title=e.title,n.description=e.description),"add"===this.method&&(n.created=(()=>{const t=new Date,e=t.getFullYear().toString().slice(2,4),i=t.getMonth()<9?`0${t.getMonth()+1}`:t.getMonth()+1;return`${t.getDate()}.${i}.${e} ${t.getHours()<10?`0${t.getHours()}`:t.getHours()}:${t.getMinutes()<10?`0${t.getMinutes()}`:t.getMinutes()}`})()),n.status=s,this.chooseMethod(n,a)}async chooseMethod(t,e){if("add"!==this.method)if("delete"!==this.method)if("edit"!==this.method)if("check"!==this.method){if("getId"===this.method){let i;try{if((e&&!e.classList.contains("visible")||this.modal)&&(i=await d("getId",t)),!this.modal)return void(e.querySelector(".item__description-content").textContent=i);this.modal.querySelector(".modal__description_full input").value=i}catch(t){console.error(t)}finally{this.modal||e.classList.toggle("visible")}}}else try{await d("check",t,e.closest(".tickets-list__item")),e.classList.toggle("active")}catch(t){console.error(t)}else try{const e=await d("edit",t,this.modal.querySelector(".modal-form"));this.tickets[e].title=t.title,this.tickets[e].description=t.description}catch(t){console.error(t)}finally{this.modal.remove(),this.renderTaskList()}else try{const e=await d("delete",t,this.modal.querySelector(".modal-form"));this.tickets.splice(e,1)}catch(t){console.error(t)}finally{this.modal.remove(),this.renderTaskList()}else try{await d("add",t,this.modal.querySelector(".modal-form")),this.tickets.push(t)}catch(t){console.error(t)}finally{this.modal.remove(),this.renderTaskList()}}collectTextData(){const t=[...this.modal.querySelectorAll("input")];for(const e of t)if(""===e.value)return!1;return{title:this.modal.querySelector(".modal__description_short input").value,description:this.modal.querySelector(".modal__description_full input").value}}addEventForTaskItem(t){t.addEventListener("click",(async e=>{if(this.modal&&(this.modal=null),e.target.closest(".edit-button")){if(!this.modal){this.modal=new n("body","edit").init();const e=t.querySelector(".ticket-content").textContent;this.modal.querySelector(".modal__description_short input").value=e,this.method="getId",this.collectFullData({id:t.dataset.id}),this.method="edit",this.createModal(t.dataset.id)}}else e.target.closest(".delete-button")?this.modal||(this.modal=new n("body","delete").init(),this.method="delete",this.createModal(t.dataset.id)):(this.method="getId",this.collectFullData({id:t.dataset.id},t.querySelector(".item__description")))})),t.querySelector(".ticket-status input").addEventListener("change",(e=>{this.method="check",this.collectFullData({id:t.dataset.id,status:!0},e.target.closest(".ticket-status"))}))}createModal(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;this.modal&&this.modal.addEventListener("click",(e=>{if(e.target.closest(".submit-button")){const e=this.collectTextData();if(!e&&"delete"!==this.method)return;this.collectFullData({textData:e,id:t})}}))}addEvents(){document.querySelector(".header__button").addEventListener("click",(t=>{t.preventDefault(),this.modal=new n("body","add").init(),this.method="add",this.createModal()}))}}document.addEventListener("DOMContentLoaded",(()=>{new l(".helpdesk","tickets__container").init()}))})();
//# sourceMappingURL=main.js.map